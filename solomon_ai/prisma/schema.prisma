// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql" // Changed from sqlite to postgresql
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

model User {
  id             String              @id @default(uuid()) @db.Uuid
  email          String              @unique
  name           String?             
  image          String?
  username       String?             @unique
  password       String?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  emailVerified  Boolean?
  birthday       DateTime?
  zodiacSign     String?
  ennealogy      Int?
  lifePathNumber Int?
  religion       String?
  mylesBridgeType String? 
  cardologyNumber String?
  nameNumerolgyNumber String?
  paymentIntentId String? //This line stores the paymentID for user 
  messages       Messages[]
  conversations  UserConversations[]
  accounts       Account[]
  progress       UserProgress?
  progressId     String?             @unique


}

model Account {
  id                 String  @id @default(uuid()) @db.Uuid
  type               String?
  userId             String
  provider           String
  providerAccountId  String
  refresh_token      String? // OAuth refresh token
  access_token       String? // OAuth access token
  expires_at         Int? // Expiry timestamp
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String? // OAuth1 token secret
  oauth_token        String? // OAuth1 token

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], name: "idx_account_user_id")
}


model Conversation {
  id            String       @id @default(uuid()) @db.Uuid
  title        String?             @db.VarChar(255)
  firstConvo   Boolean             @default(false)
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  messages     Messages[]
  participants UserConversations[]
}

model Messages {
  id             String       @id @default(uuid()) @db.Uuid
  title          String       @db.VarChar(255)
  userContent    String? // Content from the user
  botResponse    String? // Response from the bot
  published      Boolean      @default(false)
  firstConvo     Boolean      @default(false) // Add this line
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
  author         User?         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId       String        @db.Uuid
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String

  @@index([authorId], name: "idx_messages_author_id")
  @@index([conversationId], name: "idx_messages_conversation_id")
}

model UserConversations {
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String       @db.Uuid
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String       @db.Uuid

  @@id([userId, conversationId])
  @@index([userId], name: "idx_user_conversations_user_id")
  @@index([conversationId], name: "idx_user_conversations_conversation_id")
}

model UserProgress {
  id              Int     @id @default(autoincrement())
  currentQuestion Int
  responses       Json    @default("[]")
  userId          String   @unique @db.Uuid
  user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  onComplete      Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
